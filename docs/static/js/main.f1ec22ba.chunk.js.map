{"version":3,"sources":["components/TaskListComponent.js","components/ToDoListComponent.js","App.js","reportWebVitals.js","index.js"],"names":["TaskListComponent","props","tasks","useState","showActionsBtn","setshowActionsBtn","editMode","setEditMode","currentId","setCurrentId","currentText","setCurrentText","doneTaskStyle","display","height","width","alignItems","color","textDecoration","cursor","toDoTaskStyle","handleMouseLeave","taskList","map","task","className","onMouseOver","id","onMouseLeave","isDone","style","onClick","updateTaskStatus","CheckOutlined","visibility","text","EditOutlined","DeleteOutlined","deleteTask","length","onSubmit","updateTaskText","placeholder","onChange","e","target","value","required","type","TodoListComponent","setTaskList","newTask","setNewTask","preventDefault","prevList","event","Date","now","filter","item","updateStatus","newtext","updateText","App","ToDoListComponent","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.f1ec22ba.chunk.js","sourcesContent":["import React, {useState} from 'react'\r\nimport { DeleteOutlined, CheckOutlined, EditOutlined } from '@ant-design/icons';\r\n\r\nfunction TaskListComponent(props) {\r\n\tconst tasks = props.tasks\r\n\tconst [showActionsBtn, setshowActionsBtn] = useState(false)\r\n\tconst [editMode, setEditMode] = useState(false)\r\n\tconst [currentId, setCurrentId] = useState(0)\r\n\tconst [currentText, setCurrentText] = useState('')\r\n\tconst doneTaskStyle = {\r\n\t\tdisplay:'flex',\r\n\t\theight: '100%',\r\n\t\twidth: '100%',\r\n\t\talignItems: 'center',\r\n\t\tcolor: 'grey',\r\n\t\ttextDecoration: 'line-through',\r\n\t\tcursor: 'pointer'\r\n\t}\r\n\tconst toDoTaskStyle = {\r\n\t\tdisplay:'flex',\r\n\t\theight: '100%',\r\n\t\twidth: '100%',\r\n\t\talignItems: 'center',\r\n\t\tcursor: 'pointer'\r\n\t}\r\n\r\n\tconst handleMouseOver = (id) => {\r\n\t\tsetCurrentId(id)\r\n\t\tsetshowActionsBtn(true)\r\n\t}\r\n\r\n\tconst handleMouseLeave = () => {\r\n\t\tsetCurrentId(0)\r\n\t\tsetshowActionsBtn(false)\r\n\t}\r\n\r\n\tconst handleEditText = (id, text) => {\r\n\t\tsetEditMode(true)\r\n\t\tsetCurrentId(id)\r\n\t\tsetCurrentText(text)\r\n\t}\r\n\r\n\tconst handleUpdateText = () => {\r\n\t\tprops.updateTaskText(currentId, currentText)\r\n\t\tsetEditMode(false)\r\n\t}\r\n\r\n\tconst handleTaskTextChange = (e) => {\r\n\t\tsetCurrentText(e.target.value)\r\n\t}\r\n\r\n\tconst taskList = tasks.map(task => (\r\n\t\t<div key={task.id} className=\"task-list-item\" onMouseOver={()=>handleMouseOver(task.id)} onMouseLeave={handleMouseLeave}>\r\n\t\t\t{ task.isDone ? \r\n\t\t\t\t<div style={doneTaskStyle} onClick={()=> props.updateTaskStatus(task.id)}>\r\n\t\t\t\t\t<CheckOutlined style={{visibility: 'visible'}}/>\r\n\t\t\t\t\t<span>{task.text}</span>\r\n\t\t\t\t</div> :\r\n\t\t\t\t<div style={toDoTaskStyle} onClick={()=> props.updateTaskStatus(task.id)}>\r\n\t\t\t\t\t<CheckOutlined style={{visibility: 'hidden'}}/>\r\n\t\t\t\t\t<span>{task.text}</span>\r\n\t\t\t\t</div>\r\n\t\t\t\t\r\n\t\t\t}\r\n\t\t\t{ showActionsBtn && (currentId === task.id) ?\r\n\t\t\t\t<div className=\"action-btn\" style={{visibility: 'visible'}}>\r\n\t\t\t\t\t<EditOutlined className=\"edit-icon\" onClick={()=>handleEditText(task.id, task.text)} />\r\n\t\t\t\t\t<DeleteOutlined className=\"delete-icon\" onClick={() => props.deleteTask(task.id)} />\r\n\t\t\t\t</div> \r\n\t\t\t\t: \r\n\t\t\t\t<div className=\"action-btn\" style={{visibility: 'hidden'}}>\r\n\t\t\t\t\t<EditOutlined  />\r\n\t\t\t\t\t<DeleteOutlined />\r\n\t\t\t\t</div>\r\n\t\t\t}\r\n\t\t</div>\r\n\t))\r\n\treturn (\r\n\t\t<div>\r\n\t\t\t{\ttaskList.length !== 0 ? \r\n\t\t\t\t<div className=\"task-list-content\">\r\n\t\t\t\t\t{editMode ? \r\n\t\t\t\t\t\t<form onSubmit={handleUpdateText} className=\"edit-form\">\r\n\t\t\t\t\t\t\t<input placeholder=\"edit task\" onChange={handleTaskTextChange} value={currentText} required></input>\r\n\t\t\t\t\t\t\t<button className=\"btn-cancel\" onClick={()=>setEditMode(false)}>Cancel</button>\r\n\t\t\t\t\t\t\t<button className=\"btn-save\" type='submit'>Save</button>\r\n\t\t\t\t\t\t</form> \r\n\t\t\t\t\t: taskList}\r\n\t\t\t\t</div>\r\n\t\t\t: null }\r\n\t\t\t\r\n\t\t</div>\r\n\t)\r\n}\r\n\r\nexport default TaskListComponent\r\n","import React, { useState } from 'react'\r\nimport TaskListComponent from './TaskListComponent'\r\n\r\nfunction TodoListComponent() {\r\n\tconst [taskList, setTaskList] = useState([])\r\n\tconst [newTask, setNewTask] = useState({id:'', text: '', isDone: false})\r\n\r\n\tconst handleInputNewTask = (event) => {\r\n\t\tsetNewTask({\r\n\t\t\tid: Date.now(),\r\n\t\t\ttext: event.target.value,\r\n\t\t\tisDone: false\r\n\t\t})\r\n\t}\r\n\r\n\tconst addNewTask = (e) => {\r\n\t\t// check user submit blank input field\r\n\t\te.preventDefault()\r\n\t\tif(newTask.text !== ''){\r\n\t\t\tsetTaskList(prevList => [...prevList, newTask])\r\n\t\t}\r\n\t\t// clear task input field\r\n\t\tsetNewTask({id: '', text: '', isDone: false})\r\n\t}\r\n\r\n\tconst handleDeleteTask = (id) => {\r\n\t\tsetTaskList(prevList => prevList.filter(item => item.id !== id))\r\n\t\t// console.log(`deleted id = ${id}`)\r\n\t}\r\n\r\n\tconst handleUpdateTaskStatus = (id) => {\r\n\t\tconst updateStatus = taskList.map(task => {\r\n\t\t\tif(task.id === id){\r\n\t\t\t\ttask.isDone = !task.isDone\r\n\t\t\t}\r\n\t\t\treturn task\r\n\t\t})\r\n\t\tsetTaskList(updateStatus)\r\n\t}\r\n\t\r\n\tconst handleUpdateTaskText = (id, newtext) => {\r\n\t\tconst updateText= taskList.map(task => {\r\n\t\t\tif(task.id === id){\r\n\t\t\t\ttask.text = newtext\r\n\t\t\t}\r\n\t\t\treturn task\r\n\t\t})\r\n\t\tsetTaskList(updateText)\r\n\t}\r\n\r\n\treturn (\r\n\t\t<div>\r\n\t\t\t<div className=\"task-list-title\">\r\n\t\t\t\t<p>Simple To-Do Lists</p>\r\n\t\t\t</div>\r\n\t\t\t<form onSubmit={addNewTask} className=\"new-task-section\">\r\n\t\t\t\t<input placeholder=\"Enter new task\" value={newTask.text} required onChange={handleInputNewTask}></input>\r\n\t\t\t\t<button type=\"submit\">Add Task</button>\r\n\t\t\t</form>\r\n\t\t\t<div className=\"task-list-section\">\r\n\t\t\t\t<TaskListComponent tasks={taskList} deleteTask={handleDeleteTask} updateTaskStatus={handleUpdateTaskStatus} updateTaskText={handleUpdateTaskText} />\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t)\r\n}\r\n\r\nexport default TodoListComponent\r\n","import './App.css'\nimport ToDoListComponent from './components/ToDoListComponent'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n\t\t\t<ToDoListComponent />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}